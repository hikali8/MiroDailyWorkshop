
    // 4.1 Create delegation abstraction

    abstract inner class WatchDelegations<T>{
        abstract inner class Delegation(val targets: Set<T>,
                                        val isAll: Boolean,
                                        var range: Rect?,
                                        var remainingCycles :Int){     // forever if negative, typically -1
            var isRunning: Boolean = true

            abstract val contactMethod: IReplyMethod<*>
        }

        val toAppear = mutableListOf<Delegation>()
        val toDisappear = mutableListOf<Delegation>()
        var periodicJob: Job? = null

        fun tryToSetUpJob(){
            Log.d("#0x-AS4", "Trying to set up job")
            if (imageHandler == null || (toAppear.isEmpty() && toDisappear.isEmpty()) )
                return

            if (periodicJob?.isActive != true){
                periodicJob = getPeriodicJob().jobStart()
                Log.d("#0x-AS4", "Tried to set up job")
            }
        }

        protected abstract fun getPeriodicJob(): PeriodicRecognition<T>

        protected inline fun <reified R> _failizate(){
            if (iConnector != null)
                for (delegation in toAppear + toDisappear)
                    if(delegation.isRunning)
                        delegation.contactMethod<R>(false)
            this.terminate()
        }

        fun terminate(){
            periodicJob?.cancel()
            toAppear.clear()
            toDisappear.clear()
        }
    }

    inner class WordDelegations: WatchDelegations<String>() {
        inner class WordDelegation(targets: Set<String>,
                                   isAll: Boolean,
                                   range: Rect?,
                                   remainingCycles :Int,
                                   override val contactMethod: IReplyMethod<WordToBoxesParcel>
        ): Delegation(targets, isAll, range, remainingCycles)

        override fun getPeriodicJob(): PeriodicRecognition<String>
            = PeriodicRecognitionWord(
                this,
                imageHandler!!,
                watchInterval
            )

        fun failizate() = _failizate<WordToBoxesParcel>()
    }

    private val wordDelegations = WordDelegations()


// 4.2 Interfaces and implements: Received Watching Delegation Dispatch

        override fun watchOnWordInRange(
            word: String,
            maximalCycles: Int,
            isToAppear: Boolean,
            range: Rect?,
            iWords: IWordsReply
        ) {
            val delegation = wordDelegations.WordDelegation(
                setOf(word),
                true,
                range,
                maximalCycles,
                IReplyMethod(iWords::reply)
            )
            if(isToAppear)
                wordDelegations.toAppear.add(delegation)
            else
                wordDelegations.toDisappear.add(delegation)

            tryToSetUpWatchingSchedule()
        }

        override fun watchOnWordsInRange(
            words: Array<String>,
            isAllOrAny: Boolean,
            maximalCycles: Int,
            range: Rect?,
            isToAppear: Boolean,
            iWords: IWordsReply
        ) {
            val delegation = wordDelegations.WordDelegation(
                words.toSet(),
                true,
                range,
                maximalCycles,
                IReplyMethod(iWords::reply)
            )
            if(isToAppear)
                wordDelegations.toAppear.add(delegation)
            else
                wordDelegations.toDisappear.add(delegation)

            tryToSetUpWatchingSchedule()
        }



        override fun getTextInRangeSync(range: Rect?): ParcelableText {
            return runBlocking {
                val recognizable = imageHandler?.getRecognizable()
                val text = if (range != null){
                    recognizable?.findOnGoogleOCRerInRange(range)
                }else{
                    recognizable?.findOnGoogleOCRer()
                }
                if (text == null)
                    ParcelableText()
                else
                    ParcelableText(text)
            }
        }


        override fun clearWatchings() {
            wordDelegations.failizate()
        }


    // 4.3 Watch at an interval (millisecond).

    var watchInterval = 100L    //TODO: configuration needed
        private set

    
    fun tryToSetUpWatchingSchedule(){
        if (iConnector == null){    // if visitor has left
            iAccessibilityExposed.terminateMonitorings()
            return
        }
//        imageDelegations.tryToSetUpJob()
        wordDelegations.tryToSetUpJob()
    }

